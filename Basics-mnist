kerasのmnistのサンプルを読もうと試みる
import keras as ks

from keras.models import Sequential
from keras.datasets import mnist
(x_train, y_train), (x_test, y_test) = mnist.load_data()

x_train
x_trainがarrayで出てきた

import sys
import numpy as np
from keras.utils import np_utils
from PIL import Image

train_no = 0

print('訓練画像')
for xs in x_train[train_no] :
    for x in xs :
        sys.stdout.write('%03d ' % x)
    sys.stdout.write('\n')
      
outImg = Image.fromarray(x_train[train_no].reshape((28, 28))).convert('RGB')
outImg.save('train.png')
      
print('訓練ラベル (y_train) = %d' % y_train[train_no])
      
test_no = 0
      
print('テスト画像')
for xs in x_test[test_no]:
    for x in xs:
        sys.stdout.write('%03d ' % x)
    sys.stdout.write('\n')
      
outImg = Image.fromarray(x_test[test_no].reshape((28, 28))).convert('RGB')
outImg.save('test.png')

print('テストラベル(y_test) = %d' % y_test[test_no])

学習用データ1件目とテストデータ1件目表示された

次はモデル
from keras.layers import Dense, Dropout
from keras.optimizers import RMSprop

batch_size = 128
num_classes = 10
epochs = 20

x_train = x_train.reshape(60000, 784)
x_test = x_test.reshape(10000, 784)
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255
print(x_train.shape[0], 'train samples')
print(x_test.shape[0], 'test samples')

y_train = ks.utils.to_categorical(y_train, num_classes)
y_test = ks.utils.to_categorical(y_test, num_classes)

model = Sequential()
model.add(Dense(512, activation='relu', input_shape=(784, )))
model.add(Dropout(0.2))
model.add(Dense(512, activation='relu'))
model.add(Dropout(0.2))
model.add(Dense(10, activation='softmax'))

model.summary()
model.compile(loss='categorical_crossentropy',
              optimizer=RMSprop(),
              metrics=['accuracy'])
モデルが構築された。次訓練
history = model.fit(x_train, y_train,
                    batch_size=batch_size,
                    epochs=epochs,
                    verbose=1,
                    validation_data=(x_test, y_test))
評価
score = model.evaluate(x_test, y_test, verbose=0)
print('Test loss:', score[0])
print('Test accuracy:', score[1])
良好。難しい
